---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "bee.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "bee.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "bee.fullname" . }}-headless
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    {{- toYaml .Values.updateStrategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "bee.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "bee.selectorLabels" . | nindent 8 }}
      {{- if .Values.singlePodSts.enabled }}
        {{- include "bee.singlePodSts" . | nindent 8 }}
      {{- end }}
      {{- if .Values.podLabels }}
      {{- range $key, $value := .Values.podLabels }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- end }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "bee.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or .Values.libp2pSettings.enabled .Values.p2pFixedPort.enabled .Values.swarmSettings.enabled .Values.extraInitContainers .Values.autoNeighborhood.enabled }}
      initContainers:
        {{- if .Values.libp2pSettings.enabled }}
        - name: init-libp2p
          image: ethersphere/busybox:1.36
          command:
            - sh
            - -c
            - >
              mkdir -p /home/bee/.bee/keys;
              chown -R 999:999 /home/bee/.bee/keys;
              export KEY=$(cat /tmp/bee/libp2p.map | grep $(hostname): | cut -d' ' -f2);
              if [ -z "${KEY}" ]; then exit 0; fi;
              printf '%s' "${KEY}" > /home/bee/.bee/keys/libp2p_v2.key;
              echo 'node initialization done';
          volumeMounts:
            - name: data
              mountPath: /home/bee/.bee
            - name: bee-libp2p
              mountPath: /tmp/bee
        {{- end }}
        {{- if .Values.swarmSettings.enabled }}
        - name: init-swarm
          image: ethersphere/busybox:1.36
          command:
            - sh
            - -c
            - >
              mkdir -p /home/bee/.bee/keys;
              chown -R 999:999 /home/bee/.bee/keys;
              export KEY=$(cat /tmp/bee/swarm.map | grep $(hostname): | cut -d' ' -f2);
              if [ -z "${KEY}" ]; then exit 0; fi;
              printf '%s' "${KEY}" > /home/bee/.bee/keys/swarm.key;
              echo 'node initialization done';
          volumeMounts:
            - name: data
              mountPath: /home/bee/.bee
            - name: bee-swarm
              mountPath: /tmp/bee
        {{- end }}
        {{- if .Values.p2pFixedPort.enabled }}
        - name: init-natport
          image: ethersphere/busybox:1.36
          command:
            - sh
            - -c
            - >
              PUBLIC_IP=$(wget -T 2 {{ .Values.p2pFixedPort.publicIpUrl }} -q -O -);
              export INDEX=$(echo $(hostname) | rev | cut -d'-' -f 1 | rev);
              NAT_PORT=$(( {{ .Values.p2pFixedPort.nodePortStart }} + INDEX ));
              cp -p /tmp/.bee.yaml /home/bee/.bee.yaml;
              printf 'nat-addr: %s:%s\n' "${PUBLIC_IP}" "${NAT_PORT}" >> /home/bee/.bee.yaml;
              echo 'node initialization done';
          volumeMounts:
            - name: config-file
              mountPath: /home/bee
            - name: config
              mountPath: /tmp/.bee.yaml
              subPath: .bee.yaml
        {{- end }}
        {{- if .Values.autoNeighborhood.enabled }}
        - name: init-neighborhood
          image: ethersphere/busybox:1.36
          command:
            - sh
            - -c
            - >
              if [ -f /home/bee/.bee/keys/swarm.key ]; then echo 'initial overlay already mined'; exit 0; fi;
              NEIGH=$(wget --header="Accept: text/plain"  -T 2 https://api.swarmscan.io/v1/network/neighborhoods/suggestion -q -O -);
              printf 'swarmscan suggestion: %s\n' "${NEIGH}";
              if [[ ! -n "${NEIGH}" ]] [[ ! "${NEIGH}" =~ ^[0,1]+$ ]]; then echo 'bad neighborhood value ' "${NEIGH}" ; exit 1; fi;
              if ! [ -f /home/bee/.bee.yaml ]; then cp -p /tmp/.bee.yaml /home/bee/.bee.yaml; fi;
              printf 'target-neighborhood: %s\n' "${NEIGH}" >> /home/bee/.bee.yaml;
              echo 'node initialization done';
          volumeMounts:
            - name: config-file
              mountPath: /home/bee
            - name: config
              mountPath: /tmp/.bee.yaml
              subPath: .bee.yaml
            - name: data
              mountPath: /home/bee/.bee
        {{- end }}
        {{- if .Values.extraInitContainers }}
          {{- toYaml .Values.extraInitContainers | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ include "bee.image" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if or .Values.beeEnv .Values.netemCmd .Values.extraEnvs .Values.envFrom }}
          env:
            {{- if .Values.beeEnv }}
            {{- range $key, $value := .Values.beeEnv }}
            - name: BEE_{{ $key | upper }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.netemCmd }}
            - name: NETEM_CMD
              value: {{ .Values.netemCmd }}
            {{- end }}
          {{- with .Values.extraEnvs }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- if .Values.envFrom }}
          envFrom:
          {{- with .Values.envFrom }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}
          command:
            {{- range .Values.beeCommand }}
            - {{ . }}
            {{- end }}
          ports:
            - containerPort: {{ int (include "bee.config.api_port" .) }}
              name: api
              protocol: TCP
            - containerPort: {{ int (include "bee.config.p2p_port" .) }}
              name: p2p
              protocol: TCP
          {{- if .Values.probesEnable }}
          {{- if index .Values.beeConfig "debug-api-enable" }}
            - containerPort: {{ int (include "bee.config.debug_api_port" .) }}
              name: debug
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: debug
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              path: /readiness
              port: debug
            initialDelaySeconds: 20
          {{- else }}
          livenessProbe:
            httpGet:
              path: /
              port: api
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              path: /
              port: api
            initialDelaySeconds: 20
          {{- end }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          volumeMounts:
            {{- if or .Values.p2pFixedPort.enabled .Values.autoNeighborhood.enabled }}
            - name: config-file
              mountPath: /home/bee
            {{- else }}
            - name: config
              mountPath: /home/bee/.bee.yaml
              readOnly: true
              subPath: .bee.yaml
            {{- end }}
            - name: data
              mountPath: /home/bee/.bee
            {{- if .Values.persistence.separateStatestore.enabled }}
            - name: statestore
              mountPath: /home/bee/.bee/statestore
            {{- end }}
            {{- if .Values.persistence.separateLocalstore.enabled }}
            - name: localstore
              mountPath: /home/bee/.bee/localstore
            {{- end }}
            - name: bee-secret
              mountPath: /home/bee/.secret/password
              subPath: password
              readOnly: true
        {{- if .Values.gatewayProxy.enabled }}
        - name: gateway-proxy
          image: "{{ include "gatewayProxy.image" . }}"
          imagePullPolicy: {{ .Values.gatewayProxy.image.pullPolicy }}
          env:
            - name: HOST
              value: "0.0.0.0"
            - name: PORT
              value: "8633"
            - name: BEE_API_URL 
              value: "http://localhost:1633"
          {{- if .Values.gatewayProxy.autobuy.enabled }}
            - name: BEE_DEBUG_API_URL
              value: "http://localhost:1635"
          {{- end }}
          {{- with .Values.gatewayProxy.envs }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          command:
            - node
            - dist/index.js
          ports:
            - containerPort: 8633
              name: gateway-proxy
              protocol: TCP
          resources:
            {{- toYaml .Values.gatewayProxy.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /health
              port: gateway-proxy
          readinessProbe:
            httpGet:
              path: /readiness
              port: gateway-proxy
        {{- end }}
      volumes:
        - name: config-file
          emptyDir: {}
        - name: config
          configMap:
            name: {{ template "bee.fullname" . }}
        - name: bee-secret
          secret:
            {{- if .Values.existingSecret }}
            secretName: {{ .Values.existingSecret }}
            items:
              - key: {{ template "bee.secretPasswordKey" . }}
                path: password
            {{- else }}
            secretName: {{ template "bee.fullname" . }}-password
            items:
              - key: password
                path: password
            {{- end }}
        {{- if .Values.libp2pSettings.enabled }}
        - name: bee-libp2p
          secret:
            secretName: {{ template "bee.libp2pKeysSecretName" . }}
            items:
              - key: {{ template "bee.libp2pKeysSecretKey" . }}
                path: libp2p.map
        {{- end }}
        {{- if .Values.swarmSettings.enabled }}
        - name: bee-swarm
          secret:
            secretName: {{ template "bee.swarmKeysSecretName" . }}
            items:
              - key: {{ template "bee.swarmKeysSecretKey" . }}
                path: swarm.map
        {{- end }}
  {{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
    {{- with .Values.persistence.existingClaim }}
            claimName: {{ tpl . $ }}
    {{- end }}
    {{- if .Values.persistence.separateStatestore.enabled }}
        - name: statestore
          persistentVolumeClaim:
      {{- with .Values.persistence.separateStatestore.existingClaim }}
            claimName: {{ tpl . $ }}
      {{- end }}
    {{- end }}
    {{- if .Values.persistence.separateLocalstore.enabled }}
        - name: localstore
          persistentVolumeClaim:
      {{- with .Values.persistence.separateLocalstore.existingClaim }}
            claimName: {{ tpl . $ }}
      {{- end }}
    {{- end }}
  {{- else if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
  {{- else }}
  volumeClaimTemplates:
  - metadata:
      name: data
    {{- with .Values.persistence.annotations }}
      annotations:
      {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
      {{- end }}
    {{- end }}
      labels:
        {{- include "bee.labelsVCT" . | nindent 8 }}
    spec:
      accessModes:
        - {{ .Values.persistence.accessMode | quote }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
      {{ include "bee.storageClass" . }}
  {{- if .Values.persistence.separateStatestore.enabled }}
  - metadata:
      name: statestore
    {{- with .Values.persistence.separateStatestore.annotations }}
      annotations:
      {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
      {{- end }}
    {{- end }}
      labels:
        {{- include "bee.labelsVCT" . | nindent 8 }}
    spec:
      accessModes:
        - {{ .Values.persistence.separateStatestore.accessMode | quote }}
      resources:
        requests:
          storage: {{ .Values.persistence.separateStatestore.size | quote }}
      {{ include "bee.statestoreStorageClass" . }}
  {{- end }}
  {{- if .Values.persistence.separateLocalstore.enabled }}
  - metadata:
      name: localstore
    {{- with .Values.persistence.separateLocalstore.annotations }}
      annotations:
      {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
      {{- end }}
    {{- end }}
      labels:
        {{- include "bee.labelsVCT" . | nindent 8 }}
    spec:
      accessModes:
        - {{ .Values.persistence.separateLocalstore.accessMode | quote }}
      resources:
        requests:
          storage: {{ .Values.persistence.separateLocalstore.size | quote }}
      {{ include "bee.localstoreStorageClass" . }}
  {{- end }}
  {{- end }}
