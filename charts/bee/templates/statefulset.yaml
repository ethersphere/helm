---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "bee.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "bee.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "bee.fullname" . }}-headless
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    {{- toYaml .Values.updateStrategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "bee.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "bee.selectorLabels" . | nindent 8 }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "bee.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or .Values.libp2pSettings.enabled .Values.p2pFixedPort.enabled .Values.swarmSettings.enabled }}
      initContainers:
        {{- if .Values.libp2pSettings.enabled }}
        - name: init-libp2p
          image: busybox:1.28
          command:
            - sh
            - -c
            - >
              export INDEX=$(echo $(hostname) | rev | cut -d'-' -f 1 | rev);
              mkdir -p /home/bee/.bee/keys;
              chown -R 999:999 /home/bee/.bee/keys;
              export KEY=$(cat /tmp/bee/libp2p.map | grep bee-${INDEX}: | cut -d' ' -f2);
              if [ -z "${KEY}" ]; then exit 0; fi;
              printf '%s' "${KEY}" > /home/bee/.bee/keys/libp2p.key;
              echo 'node initialization done';
          volumeMounts:
            - name: data
              mountPath: /home/bee/.bee
            - name: bee-libp2p
              mountPath: /tmp/bee
        {{- end }}
        {{- if .Values.swarmSettings.enabled }}
        - name: init-swarm
          image: busybox:1.28
          command:
            - sh
            - -c
            - >
              export INDEX=$(echo $(hostname) | rev | cut -d'-' -f 1 | rev);
              mkdir -p /home/bee/.bee/keys;
              chown -R 999:999 /home/bee/.bee/keys;
              export KEY=$(cat /tmp/bee/swarm.map | grep bee-${INDEX}: | cut -d' ' -f2);
              if [ -z "${KEY}" ]; then exit 0; fi;
              printf '%s' "${KEY}" > /home/bee/.bee/keys/swarm.key;
              echo 'node initialization done';
          volumeMounts:
            - name: data
              mountPath: /home/bee/.bee
            - name: bee-swarm
              mountPath: /tmp/bee
        {{- end }}
        {{- if .Values.p2pFixedPort.enabled }}
        - name: init-natport
          image: busybox:1.28
          command:
            - sh
            - -c
            - >
              export INDEX=$(echo $(hostname) | rev | cut -d'-' -f 1 | rev);
              NAT_PORT=$(( {{ .Values.p2pFixedPort.nodePortStart }} + INDEX ));
              cp -p /tmp/.bee.yaml /home/bee/.bee.yaml;
              printf 'nat-addr: :%s\n' "${NAT_PORT}" >> /home/bee/.bee.yaml;
              echo 'node initialization done';
          volumeMounts:
            - name: config-file
              mountPath: /home/bee
            - name: config
              mountPath: /tmp/.bee.yaml
              subPath: .bee.yaml
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ include "bee.image" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - bee
            - start
            - --config=.bee.yaml
          ports:
            - containerPort: {{ int (split ":" .Values.beeConfig.api_addr )._1 }}
              name: api
              protocol: TCP
            - containerPort: {{ int (split ":" .Values.beeConfig.p2p_addr )._1 }}
              name: p2p
              protocol: TCP
          {{- if .Values.beeConfig.debug_api_enable }}
            - containerPort: {{ int (split ":" .Values.beeConfig.debug_api_addr )._1 }}
              name: debug
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: debug
            initialDelaySeconds: 25
          readinessProbe:
            httpGet:
              path: /readiness
              port: debug
            initialDelaySeconds: 25
          {{- else }}
          livenessProbe:
            httpGet:
              path: /
              port: api
            initialDelaySeconds: 25
          readinessProbe:
            httpGet:
              path: /
              port: api
            initialDelaySeconds: 25
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          volumeMounts:
            {{- if .Values.p2pFixedPort.enabled }}
            - name: config-file
              mountPath: /home/bee
            {{- else }}
            - name: config
              mountPath: /home/bee/.bee.yaml
              readOnly: true
              subPath: .bee.yaml
            {{- end }}
            - name: data
              mountPath: /home/bee/.bee
            {{- if .Values.beeConfig.usePasswordFile }}
            - name: bee-secret
              mountPath: /home/bee/.secret
              readOnly: true
            {{- end }}
        {{- if .Values.clefSidecar.enabled }}
        - name: clef
          image: "ethereum/client-go:alltools-stable"
          imagePullPolicy: IfNotPresent
          env:
          {{- if .Values.beeConfig.usePasswordFile }}
          - name: SECRET_FILE
            value: /secret/password
          {{- else }}
          - name: SECRET
            value: {{ include "bee.password" . }}
          {{- end }}
          command:
            - sh
            - -c
            - >
              if [ -n "${SECRET_FILE+x}" ]; then export SECRET=$(cat $SECRET_FILE); fi;
              wget -q https://gist.githubusercontent.com/vandot/5063ca7ac3e845261faa5b04053d0a10/raw/50cdcb350fd137e5985b48dc9ac4d8f33217706a -O /clef.sh;
              chmod +x /clef.sh;
              /clef.sh ${SECRET};
          ports:
            - containerPort: 8550
              name: api
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /bee
              readOnly: true
            {{- if .Values.beeConfig.usePasswordFile }}
            - name: bee-secret
              mountPath: /secret
              readOnly: true
            {{- end }}
        {{- end }}
      volumes:
        - name: config-file
          emptyDir: {}
        - name: config
          configMap:
            name: {{ template "bee.fullname" . }}
        {{- if .Values.beeConfig.usePasswordFile }}
        - name: bee-secret
          secret:
            secretName: {{ template "bee.secretName" . }}
            items:
              - key: {{ template "bee.secretPasswordKey" . }}
                path: password
        {{- end }}
        {{- if .Values.libp2pSettings.enabled }}
        - name: bee-libp2p
          secret:
            secretName: {{ template "bee.libp2pKeysSecretName" . }}
            items:
              - key: {{ template "bee.libp2pKeysSecretKey" . }}
                path: libp2p.map
        {{- end }}
        {{- if .Values.swarmSettings.enabled }}
        - name: bee-swarm
          secret:
            secretName: {{ template "bee.swarmKeysSecretName" . }}
            items:
              - key: {{ template "bee.swarmKeysSecretKey" . }}
                path: swarm.map
        {{- end }}
  {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
  {{- else }}
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        {{- include "bee.labelsVCT" . | nindent 8 }}
    spec:
      accessModes: 
        - {{ .Values.persistence.accessMode | quote }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
    {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: {{ .Values.persistence.storageClass | quote }}
      {{- end }}
    {{- end }}
  {{- end }}
